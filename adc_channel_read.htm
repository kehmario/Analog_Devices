<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\adc_channel_read.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\adc_channel_read.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Mar 27 23:30:31 2020
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
InterruptFIFOManage &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SysTick_Handler</a><BR>
 <LI><a href="#[41]">Beep_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">Beep_Int_Handler</a><BR>
 <LI><a href="#[c6]">adi_uart_Open</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC_Int_Handler</a> from adi_adc.o(i.ADC_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1b]">Battery_Voltage_Int_Handler</a> from adi_pwr.o(i.Battery_Voltage_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[41]">Beep_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3a]">Crypto_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3d]">Crystal_osc_Int_Handler</a> from adi_pwr.o(i.Crystal_osc_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3b]">DMA_ADC0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[35]">DMA_AES0_IN_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[36]">DMA_AES0_OUT_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[27]">DMA_Err_Int_Handler</a> from adi_dma.o(i.DMA_Err_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[37]">DMA_FLASH0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[34]">DMA_I2C0_MX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[33]">DMA_I2C0_SRX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[32]">DMA_I2C0_STX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[43]">DMA_SIP0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[44]">DMA_SIP1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[45]">DMA_SIP2_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[46]">DMA_SIP3_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[47]">DMA_SIP4_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[48]">DMA_SIP5_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[49]">DMA_SIP6_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[4a]">DMA_SIP7_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2d]">DMA_SPI0_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2c]">DMA_SPI0_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2f]">DMA_SPI1_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2e]">DMA_SPI1_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[29]">DMA_SPI2_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[28]">DMA_SPI2_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2a]">DMA_SPORT0A_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2b]">DMA_SPORT0B_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[31]">DMA_UART_RX_Int_Handler</a> from adi_uart.o(i.DMA_UART_RX_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[30]">DMA_UART_TX_Int_Handler</a> from adi_uart.o(i.DMA_UART_TX_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[15]">Ext_Int0_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[16]">Ext_Int1_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[17]">Ext_Int2_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[18]">Ext_Int3_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[21]">Flash0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1d]">GPIO_A_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1e]">GPIO_B_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1f]">GP_Tmr0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[20]">GP_Tmr1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3c]">GP_Tmr2_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[26]">I2C0_Master_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[25]">I2C0_Slave_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[50]">InterruptFIFOManage</a> from adi_adc.o(i.InterruptFIFOManage) referenced from adi_adc.o(i.adi_adc_Open)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3f]">PLL_Int_Handler</a> from adi_pwr.o(i.PLL_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[40]">RNG_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1c]">RTC0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[14]">RTC1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[54]">RxDmaErrorCallback</a> from adi_uart.o(i.RxDmaErrorCallback) referenced from adi_uart.o(i.adi_uart_Open)
 <LI><a href="#[23]">SPI0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3e]">SPI1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[24]">SPI2_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[38]">SPORT0A_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[39]">SPORT0B_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_aducm3029.o(i.SystemInit) referenced from startup_aducm3029.o(.text)
 <LI><a href="#[52]">TxDmaErrorCallback</a> from adi_uart.o(i.TxDmaErrorCallback) referenced from adi_uart.o(i.adi_uart_Open)
 <LI><a href="#[22]">UART_Int_Handler</a> from adi_uart.o(i.UART_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1a]">Vreg_over_Int_Handler</a> from adi_pwr.o(i.Vreg_over_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[19]">WDog_Tmr_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[55]">__main</a> from __main.o(!!!main) referenced from startup_aducm3029.o(.text)
 <LI><a href="#[4e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4d]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[4f]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[53]">uart_submitrxbuffer</a> from adi_uart.o(i.uart_submitrxbuffer) referenced from adi_uart.o(i.adi_uart_Open)
 <LI><a href="#[51]">uart_submittxbuffer</a> from adi_uart.o(i.uart_submittxbuffer) referenced from adi_uart.o(i.adi_uart_Open)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[58]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ec]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[59]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ed]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ee]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[69]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[60]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[f0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[62]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[100]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[101]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[102]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[103]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[6e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[64]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[106]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[107]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[108]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[57]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[10b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[66]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[10c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ADC_SampleData &rArr; common_Fail &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[10e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>Beep_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>Crypto_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA_ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA_AES0_IN_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA_AES0_OUT_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA_FLASH0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA_I2C0_MX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA_SIP0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA_SIP1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA_SIP2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA_SIP3_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA_SIP4_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA_SIP5_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA_SIP6_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA_SIP7_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_SPI0_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_SPI0_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_SPI2_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_SPI2_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_SPORT0A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_SPORT0B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Ext_Int0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Ext_Int1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Ext_Int2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Ext_Int3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Flash0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO_A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPIO_B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GP_Tmr0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>GP_Tmr1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GP_Tmr2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RNG_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPORT0A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPORT0B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WDog_Tmr_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[110]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Perf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Pass
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Fail
</UL>

<P><STRONG><a name="[73]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[76]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[77]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[75]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5d]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[112]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[6c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptFIFOManage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[113]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[80]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[114]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ca]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[117]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[74]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[83]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[72]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7f]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[84]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[63]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[65]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[85]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[67]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[91]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[e6]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[118]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[87]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[9a]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[8a]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[119]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[8c]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[88]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[11a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[11c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a1]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[61]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[96]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[99]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[11e]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[97]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[9b]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[92]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[9d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[9e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[7e]"></a>__assert_puts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, assert_stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[a3]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[aa]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[a9]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[a8]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[a4]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[11f]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[120]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[42]"></a>ADC_Int_Handler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, adi_adc.o(i.ADC_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>ADC_SampleData</STRONG> (Thumb, 846 bytes, Stack size 32 bytes, adc_channel_read.o(i.ADC_SampleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ADC_SampleData &rArr; common_Fail &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Perf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Fail
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_SubmitBuffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_StartCalibration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_SetVrefSource
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_SetDelayTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_SetAcquisitionTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_PowerUp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_IsCalibrationDone
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_GetBuffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_EnableADCSubSystem
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usleep
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>Battery_Voltage_Int_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adi_pwr.o(i.Battery_Voltage_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Battery_Voltage_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>Crystal_osc_Int_Handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, adi_pwr.o(i.Crystal_osc_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crystal_osc_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, adi_dma.o(i.DMA_Err_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_Err_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adi_uart.o(i.DMA_UART_RX_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_UART_RX_Int_Handler &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adi_uart.o(i.DMA_UART_TX_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_UART_TX_Int_Handler &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>Init_Uart</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, retarget_uart.o(i.Init_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Init_Uart &rArr; adi_uart_Open &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_uart
</UL>

<P><STRONG><a name="[3f]"></a>PLL_Int_Handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adi_pwr.o(i.PLL_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLL_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, system_aducm3029.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_GetClockFrequency
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_SetClockDivider
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_Init
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_aducm3029.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_system_EnableRetention
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>UART_Int_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adi_uart.o(i.UART_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_Int_Handler &rArr; Common_Uart_Interrupt_Handler &rArr; uart_RxDataHandler &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_Uart_Interrupt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Vreg_over_Int_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, adi_pwr.o(i.Vreg_over_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vreg_over_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9c]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[70]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_uart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[94]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[95]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[98]"></a>_sys_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[a5]"></a>_sys_seek</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[a6]"></a>_sys_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[a7]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget_io.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ttywrch &rArr; ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[bc]"></a>adi_adc_Close</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, adi_adc.o(i.adi_adc_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adi_adc_Close &rArr; adi_adc_PowerUp &rArr; adi_pwr_GetClockFrequency &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[ba]"></a>adi_adc_Enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adi_adc.o(i.adi_adc_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adi_adc_Enable &rArr; InitBufferProcessing
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBufferProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b3]"></a>adi_adc_EnableADCSubSystem</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, adi_adc.o(i.adi_adc_EnableADCSubSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adi_adc_EnableADCSubSystem
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_PowerUp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[bb]"></a>adi_adc_GetBuffer</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, adi_adc.o(i.adi_adc_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adi_adc_GetBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_EnterLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b6]"></a>adi_adc_IsCalibrationDone</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, adi_adc.o(i.adi_adc_IsCalibrationDone))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[ae]"></a>adi_adc_Open</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, adi_adc.o(i.adi_adc_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adi_adc_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticConfiguration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b1]"></a>adi_adc_PowerUp</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, adi_adc.o(i.adi_adc_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adi_adc_PowerUp &rArr; adi_pwr_GetClockFrequency &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_GetClockFrequency
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_EnableADCSubSystem
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Close
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b8]"></a>adi_adc_SetAcquisitionTime</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adi_adc.o(i.adi_adc_SetAcquisitionTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adi_adc_SetAcquisitionTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b7]"></a>adi_adc_SetDelayTime</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adi_adc.o(i.adi_adc_SetDelayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adi_adc_SetDelayTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b2]"></a>adi_adc_SetVrefSource</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, adi_adc.o(i.adi_adc_SetVrefSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adi_adc_SetVrefSource
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b5]"></a>adi_adc_StartCalibration</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, adi_adc.o(i.adi_adc_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[b9]"></a>adi_adc_SubmitBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, adi_adc.o(i.adi_adc_SubmitBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adi_adc_SubmitBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[df]"></a>adi_dma_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, adi_dma.o(i.adi_dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adi_dma_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[e0]"></a>adi_dma_RegisterCallback</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, adi_dma.o(i.adi_dma_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adi_dma_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[e8]"></a>adi_initpinmux</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pinmux.o(i.adi_initpinmux))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>adi_pwr_EnterLowPowerMode</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, adi_pwr.o(i.adi_pwr_EnterLowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_GetBuffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_PendForBuffer
</UL>

<P><STRONG><a name="[c8]"></a>adi_pwr_ExitLowPowerMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, adi_pwr.o(i.adi_pwr_ExitLowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageFifoCompletion
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>

<P><STRONG><a name="[c1]"></a>adi_pwr_GetClockFrequency</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, adi_pwr.o(i.adi_pwr_GetClockFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adi_pwr_GetClockFrequency &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_PowerUp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_Uart_Interrupt_Handler
</UL>

<P><STRONG><a name="[d9]"></a>adi_pwr_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, adi_pwr.o(i.adi_pwr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adi_pwr_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>adi_pwr_SetClockDivider</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, adi_pwr.o(i.adi_pwr_SetClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adi_pwr_SetClockDivider &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>adi_system_EnableRetention</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_aducm3029.o(i.adi_system_EnableRetention))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[dc]"></a>adi_uart_Close</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, adi_uart.o(i.adi_uart_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adi_uart_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[c2]"></a>adi_uart_ConfigBaudRate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, adi_uart.o(i.adi_uart_ConfigBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adi_uart_ConfigBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_Uart_Interrupt_Handler
</UL>

<P><STRONG><a name="[c6]"></a>adi_uart_Open</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, adi_uart.o(i.adi_uart_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = adi_uart_Open &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_dma_RegisterCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_dma_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart
</UL>

<P><STRONG><a name="[e3]"></a>adi_uart_Write</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, adi_uart.o(i.adi_uart_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_PendForBuffer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_uart
</UL>

<P><STRONG><a name="[af]"></a>common_Fail</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, common.o(i.common_Fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = common_Fail &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[e7]"></a>common_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(i.common_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>common_Pass</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, common.o(i.common_Pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = common_Pass &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>common_Perf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, common.o(i.common_Perf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = common_Perf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, adc_channel_read.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; ADC_SampleData &rArr; common_Fail &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Perf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Pass
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_SetClockDivider
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSamplesToFile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_initpinmux
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cc]"></a>stderr_putchar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget_uart.o(i.stderr_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stderr_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[cb]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget_uart.o(i.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[cd]"></a>ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget_uart.o(i.ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ttywrch &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e9]"></a>WriteSamplesToFile</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc_channel_read.o(i.WriteSamplesToFile))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>usleep</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, adc_channel_read.o(i.usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleData
</UL>

<P><STRONG><a name="[c3]"></a>FlushFifo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adi_adc.o(i.FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlushFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOutReg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptFIFOManage
</UL>

<P><STRONG><a name="[d4]"></a>GetNumChannels</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, adi_adc.o(i.GetNumChannels))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_SubmitBuffer
</UL>

<P><STRONG><a name="[d0]"></a>InitBufferProcessing</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, adi_adc.o(i.InitBufferProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitBufferProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Enable
</UL>

<P><STRONG><a name="[50]"></a>InterruptFIFOManage</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, adi_adc.o(i.InterruptFIFOManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = InterruptFIFOManage &rArr; __aeabi_assert &rArr; __assert_puts &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOutReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageFifoCompletion
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushFifo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adi_adc.o(i.adi_adc_Open)
</UL>
<P><STRONG><a name="[c7]"></a>ManageFifoCompletion</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adi_adc.o(i.ManageFifoCompletion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ManageFifoCompletion &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_ExitLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptFIFOManage
</UL>

<P><STRONG><a name="[c4]"></a>ReadOutReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adi_adc.o(i.ReadOutReg))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptFIFOManage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushFifo
</UL>

<P><STRONG><a name="[d3]"></a>StaticConfiguration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adi_adc.o(i.StaticConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Open
</UL>

<P><STRONG><a name="[ce]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adi_adc.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Close
</UL>

<P><STRONG><a name="[cf]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adi_adc.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Open
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_adc_Enable
</UL>

<P><STRONG><a name="[da]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adi_pwr.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_Init
</UL>

<P><STRONG><a name="[d5]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adi_pwr.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_ExitLowPowerMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_EnterLowPowerMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_SetClockDivider
</UL>

<P><STRONG><a name="[d6]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adi_pwr.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_EnterLowPowerMode
</UL>

<P><STRONG><a name="[d7]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adi_pwr.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_ExitLowPowerMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_EnterLowPowerMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_SetClockDivider
</UL>

<P><STRONG><a name="[bd]"></a>Common_Uart_Interrupt_Handler</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, adi_uart.o(i.Common_Uart_Interrupt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Common_Uart_Interrupt_Handler &rArr; uart_RxDataHandler &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_GetClockFrequency
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_ConfigBaudRate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_TxDataHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_RxDataHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
</UL>

<P><STRONG><a name="[54]"></a>RxDmaErrorCallback</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, adi_uart.o(i.RxDmaErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RxDmaErrorCallback &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adi_uart.o(i.adi_uart_Open)
</UL>
<P><STRONG><a name="[52]"></a>TxDmaErrorCallback</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, adi_uart.o(i.TxDmaErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TxDmaErrorCallback &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adi_uart.o(i.adi_uart_Open)
</UL>
<P><STRONG><a name="[dd]"></a>ValidateHandle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adi_uart.o(i.ValidateHandle))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_ConfigBaudRate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Close
</UL>

<P><STRONG><a name="[de]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adi_uart.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Close
</UL>

<P><STRONG><a name="[e2]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adi_uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[c0]"></a>uart_ManageProcessedBuffer</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, adi_uart.o(i.uart_ManageProcessedBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_ExitLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_Int_Handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_TxDataHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_RxDataHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDmaErrorCallback
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxDmaErrorCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_Uart_Interrupt_Handler
</UL>

<P><STRONG><a name="[e4]"></a>uart_PendForBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, adi_uart.o(i.uart_PendForBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_pwr_EnterLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Write
</UL>

<P><STRONG><a name="[bf]"></a>uart_RxDataHandler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, adi_uart.o(i.uart_RxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_RxDataHandler &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_Uart_Interrupt_Handler
</UL>

<P><STRONG><a name="[be]"></a>uart_TxDataHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, adi_uart.o(i.uart_TxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_TxDataHandler &rArr; uart_ManageProcessedBuffer &rArr; adi_pwr_ExitLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ManageProcessedBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_Uart_Interrupt_Handler
</UL>

<P><STRONG><a name="[e1]"></a>uart_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adi_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Open
</UL>

<P><STRONG><a name="[53]"></a>uart_submitrxbuffer</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, adi_uart.o(i.uart_submitrxbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_submitrxbuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adi_uart.o(i.adi_uart_Open)
</UL>
<P><STRONG><a name="[51]"></a>uart_submittxbuffer</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, adi_uart.o(i.uart_submittxbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_submittxbuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adi_uart.o(i.adi_uart_Open)
</UL>
<P><STRONG><a name="[ea]"></a>write_to_uart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, retarget_uart.o(i.write_to_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_to_uart &rArr; adi_uart_Write &rArr; uart_PendForBuffer &rArr; adi_pwr_EnterLowPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_uart_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttywrch
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>

<P><STRONG><a name="[4e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
